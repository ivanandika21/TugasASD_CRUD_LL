#include <stdlib.h>
#include <stdio.h>

struct data
{
	int info;
	struct data * next;
};

struct data *start = NULL;

int menu_utama(){
	int pilih;
	
	while(1){
        system("cls");
		printf(" ----------------------------------------\n");
		printf(" ================= MENU =================\n");
		printf(" ----------------------------------------\n\n");
		printf(" 1. Read Data\n");
		printf(" 2. Insert Data\n");
		printf(" 3. Delete Data\n");
		printf(" 4. Update Data\n");
		printf(" 5. Keluar\n");
		printf(" Silakan masukkan pilihan anda : ");
		scanf("%i", &pilih);
		switch (pilih){
			case 1: {
				menu1(); //menu 1 berisi read saja
				printf(" "); system("pause"); menu_utama();
			}
			case 2: {
				menu2(); //menu 2 berisi Input Head dan Input Tail
				printf(" "); system("pause"); menu_utama();
			}
			case 3: {
				menu3(); //menu 3 berisi Delete Head dan Delete Tails (Delete "angka" opsional)
				printf(" "); system("pause"); menu_utama();
			}
			case 4: {
				menu4(); //menu 4 berisi Update data menggunakan perulangan sampai scanf == "angka"
				printf(" "); system("pause"); menu_utama();
			}
			case 5: {
				menu5(); //keluar program
			}
		}
	}
}

void menu1(){
	int nomor;
	
	system("cls");
	printf(" ----------------------------------------\n");
	printf(" ========== MENU 1 - Read Data ==========\n");
	printf(" ----------------------------------------\n\n");
	struct data * alamat;
	if (start == NULL) {
		printf(" Maaf, Anda belum memasukkan data.\n");
	}else {
		alamat = start;
		printf(" Linked List yang telah dibuat adalah :\n");
		printf(" --------------------\n");
		printf("  No.\t Isi\n");
		printf(" --------------------\n");
		while (alamat != NULL) {
			printf("  %i\t %d\n", nomor+1, alamat->info);
			alamat = alamat->next;
			nomor++;
		}
		printf(" --------------------\n");
	}
}

void menu2(){
	int pilih;
	
	system("cls");
	printf(" ----------------------------------------\n");
	printf(" ========= MENU 2 - Insert Data =========\n");
	printf(" ----------------------------------------\n\n");
	printf(" 1. Insert Head\n");
	printf(" 2. Insert Tail\n");
	printf(" 3. Menu Utama\n");
	printf(" Silakan masukkan pilihan anda : ");
	scanf("%i", &pilih);
	if (pilih == 1){
		insert_begin();
	}
	else if (pilih == 2){
		insert_end();
	}
	else if (pilih == 3){
		menu_utama();
	}
}

void menu3(){
	int pilih;
	
	system("cls");
	printf(" ----------------------------------------\n");
	printf(" ========= MENU 3 - Delete Data =========\n");
	printf(" ----------------------------------------\n\n");
	printf(" 1. Delete Head\n");
	printf(" 2. Delete Tail\n");
	printf(" 3. Menu Utama\n");
	printf(" Silakan masukkan pilihan anda : ");
	scanf("%i", &pilih);
	if (pilih == 1){
		insert_begin();
	}
	else if (pilih == 2){
		delete_end();
	}
	else if (pilih == 3){
		menu_utama();
	}
}

void menu4(){
	int ubah, jadi;
	
	system("cls");
	printf(" ----------------------------------------\n");
	printf(" ========= MENU 4 - Update Data =========\n");
	printf(" ----------------------------------------\n\n");
	//tampilkan listnya dulu
	printf(" Pilih data yang akan diubah : ");
	scanf("%i", &ubah);
	printf(" Pilih data yang baru : ");
	scanf("%i", &jadi);
}

void menu5(){
	printf("\n Byebye!\n ");
	printf("Ivan Andika Surya, 2021\n");
	exit(EXIT_SUCCESS);
}


//==================================================================================== ALGORITMA ======
void create()
{
	struct data *temp, *alamat;
	temp = (struct data *) malloc(sizeof(struct data));
	if (temp == NULL)
	{
		printf("\nOut of Memory Space:\n");
		exit(0);
	}

	printf("\nEnter the data value for the data:\t");
	scanf("%d", &temp->info);
	temp->next = NULL;
	if (start == NULL)
	{
		start = temp;
	}
	else
	{
		alamat = start;
		while (alamat->next != NULL)
		{
			alamat = alamat->next;
		}

		alamat->next = temp;
	}
}

void display()
{
	struct data * alamat;
	if (start == NULL)
	{
		printf("\nList is empty:\n");
		return;
	}
	else
	{
		alamat = start;
		printf("\nThe List elements are:\n");
		while (alamat != NULL)
		{
			printf("| %d |\t", alamat->info);
			alamat = alamat->next;
		}
	}
	system("\n\n pause");
}

void insert_begin()
{
	struct data * temp;
	temp = (struct data *) malloc(sizeof(struct data));
	if (temp == NULL)
	{
		printf("\nOut of Memory Space:\n");
		return;
	}

	printf("\nEnter the data value for the data:\t");
	scanf("%d", &temp->info);
	temp->next = NULL;
	if (start == NULL)
	{
		start = temp;
	}
	else
	{
		temp->next = start;
		start = temp;
	}
}

void insert_end()
{
	struct data *temp, *alamat;
	temp = (struct data *) malloc(sizeof(struct data));
	if (temp == NULL)
	{
		printf("\nOut of Memory Space:\n");
		return;
	}

	printf("\nEnter the data value for the data:\t");
	scanf("%d", &temp->info);
	temp->next = NULL;
	if (start == NULL)
	{
		start = temp;
	}
	else
	{
		alamat = start;
		while (alamat->next != NULL)
		{
			alamat = alamat->next;
		}

		alamat->next = temp;
	}
}

void insert_pos()
{
	struct data *alamat, *temp;
	int i, pos;
	temp = (struct data *) malloc(sizeof(struct data));
	if (temp == NULL)
	{
		printf("\nOut of Memory Space:\n");
		return;
	}

	printf("\nEnter the position for the new data to be inserted:\t");
	scanf("%d", &pos);
	printf("\nEnter the data value of the data:\t");
	scanf("%d", &temp->info);

	temp->next = NULL;
	if (pos == 0)
	{
		temp->next = start;
		start = temp;
	}
	else
	{
		for (i = 0, alamat = start; i < pos - 1; i++)
		{
			alamat = alamat->next;
			if (alamat == NULL)
			{
				printf("\nPosition not found:[Handle with care]\n");
				return;
			}
		}

		temp->next = alamat->next;
		alamat->next = temp;
	}
}

void delete_begin()
{
	struct data * alamat;
	if (alamat == NULL)
	{
		printf("\nList is Empty:\n");
		return;
	}
	else
	{
		alamat = start;
		start = start->next;
		printf("\nThe deleted element is :%d\t", alamat->info);
		free(alamat);
	}
}

void delete_end()
{
	struct data *temp, *alamat;
	if (start == NULL)
	{
		printf("\nList is Empty:");
		exit(0);
	}
	else if (start->next == NULL)
	{
		alamat = start;
		start = NULL;
		printf("\nThe deleted element is:%d\t", alamat->info);
		free(alamat);
	}
	else
	{
		alamat = start;
		while (alamat->next != NULL)
		{
			temp = alamat;
			alamat = alamat->next;
		}

		temp->next = NULL;
		printf("\nThe deleted element is:%d\t", alamat->info);
		free(alamat);
	}
}

void delete_pos()
{
	int i, pos;
	struct data *temp, *alamat;
	if (start == NULL)
	{
		printf("\nThe List is Empty:\n");
		exit(0);
	}
	else
	{
		printf("\nEnter the position of the data to be deleted:\t");
		scanf("%d", &pos);
		if (pos == 0)
		{
			alamat = start;
			start = start->next;
			printf("\nThe deleted element is:%d\t", alamat->info);
			free(alamat);
		}
		else
		{
			alamat = start;
			for (i = 0; i < pos; i++)
			{
				temp = alamat;
				alamat = alamat->next;
				if (alamat == NULL)
				{
					printf("\nPosition not Found:\n");
					return;
				}
			}

			temp->next = alamat->next;
			printf("\nThe deleted element is:%d\t", alamat->info);
			free(alamat);
		}
	}
}

void main(){
	menu_utama();
}
